name: "Terraform"

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ssh-key: ${{ secrets.GIT }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Format
        id: fmt
        run: |
          for dir in ./src/envs/prod/*; do
            if [ -d "$dir" ]; then
              echo "Planning $dir"
              terraform fmt -check  "$dir"
            fi
          done

      - name: Terraform Init
        id: init
        run: |
          for dir in ./src/envs/prod/*; do
            if [ -d "$dir" ]; then
              echo "Planning $dir"
              cd $dir
              terraform init
            fi
          done

      - name: Terraform Validate
        id: validate
        run: |
          for dir in ./src/envs/prod/*; do
            if [ -d "$dir" ]; then
              echo "Initialization $dir"
              cd $dir
              terraform validate 
            fi
          done

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        env:
          AWS_ACCESS_KEY_ID:  ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          for dir in ./src/envs/prod/*; do
            if [ -d "$dir" ]; then
              echo "Initialization $dir"
              cd $dir
              terraform plan -no-color -input=false  > result
            cat result
            fi
          done
        continue-on-error: true

      - name: Update Pull Request
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require("fs");
            const plan = fs.readFileSync("src/envs/prod/khaled/result", "utf8");
            const maxGitHubBodyCharacters = 65536;
            
            function chunkSubstr(str, size) {
              const numChunks = Math.ceil(str.length / size)
              const chunks = new Array(numChunks)
              for (let i = 0, o = 0; i < numChunks; ++i, o += size) {
                chunks[i] = str.substr(o, size)
              }
              return chunks
            }
            
            // Split the Terraform plan into chunks if it's too big and can't fit into the GitHub Action
            var plans = chunkSubstr(plan, maxGitHubBodyCharacters); 
            for (let i = 0; i < plans.length; i++) {
              const output = `### ${{ inputs.plan-title }} Part # ${i + 1}
              #### Terraform Format and Style 🖌\`${{ steps.fmt.outcome }}\`
              #### Terraform Initialization ⚙️\`${{ steps.init.outcome }}\`
              #### Terraform Plan 📖\`${{ steps.plan.outcome }}\`
              <details><summary>Show Plan</summary>
              \`\`\`\n
              ${plans[i]}
              \`\`\`
              </details>
              *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ inputs.working-directory }}\`, Workflow: \`${{ github.workflow }}\`*`;   
            
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }
      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          for dir in ./src/envs/prod/*; do
            if [ -d "$dir" ]; then
              echo "Initialization $dir"
              cd $dir
              terraform apply -auto-approve -input=false
            fi
          done

